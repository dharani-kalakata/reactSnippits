React Snippits

----------------------------------------------------------------------------

# Map - Funtion ( should only be used on list ) 

{
    data.map(({item}) => {
        return(
            <div key={item.id}>
                <h6>{item.name}</h6>
                <p>{item.email}</p>
            </div>
        )
    })
}
------------------------------------------------------------------------

# UseEffect Rendering on Condition | Utilizing state

 - intialization

 const [ApiData, setApiData] = useState(false)

 useEffect(() => {
        fetch('http://localhost:3000/contacts')
        .then(res => res.json())
        .then(data => setApiData(data));
      }
    , [])    // Here in this list we can mention dependecy 

 - Utilization

 {ApiData ? ApiData.map((item) => {
            return(
                <div key={item.id}>
                    <h6>{item.name}</h6>
                    <p>{item.email}</p>
                </div>
            )
        }) : 'Loading'}    

-------------------------------------------------------------------------

# Context api ( Top 3 in Hooks - used to Aviod Prop drilling)

``src/App.js``

import React, { createContext, useState } from 'react'

export const MyContext = createContext("");
export default function App() {
  const [text, setText] = useState("eswar");
  return (
    <div>
      <MyContext.Provider value={{ text, setText }}>
        <Shop/>
      </MyContext.Provider>
    </div>
  );
}

``src/Shop.js``

import React, { useContext } from 'react'
import { MyContext } from './App'

export default function Shop() {
  const { text, setText } = useContext(MyContext);
  return (
    <div>
      <h1>{text}</h1>
      <button onClick={() => setText('Hello, world!')}>
        Click me
      </button>    
    </div>
  )
}
-------------------------------------------------------------------------
# React Function ( UI extraction )

import React from 'react'

export default function Shop() {
  return (
    <div>Shop</div>
  )
}
-------------------------------------------------------------------------
# Custom Hooks  ( Logic Extraction - FileName must start with keyword "use" ) 
 - Example:1 
``src/useMyApi.js``

import React, { useEffect, useState } from 'react'


export default function useMyApi(url) {
    const [fetchedData, setfetchedData] = useState('')

    useEffect(() => {
        fetch(url)
            .then(response => response.json())
            .then(json => setfetchedData(json))
 
    }, [url])
    
  return [fetchedData ]
}

``src/App.js``

import useMyApi from './useMyApi';
export const MyContext = createContext("");

export default function App() {

  const [fetchedData] = useMyApi('https://jsonplaceholder.typicode.com/todos/1');
  return (
    <div>

      {JSON.stringify(fetchedData)}

    </div>
  );
}

 - Example: 2
``src/useMyCustomHooks.js``

import React, { useState } from 'react'

export default function useMyCustomHook() {
    const [first, setfirst] = useState(10)
    const Increament = () => {
        setfirst(first+10)
    }
    const Decreament = () => {
        setfirst(first-10)
    }
    
  return [first, Increament, Decreament]
}

``src/App.js``

import React from 'react'
import useMyCustomHook from './useMyCustomHook';


export default function App() {

  const [first, Increament, Decreament] = useMyCustomHook();
  return (
   <div>

      <button onClick={Increament}>Increament</button>
      <button onClick={Decreament}>Decreament</button>
      <h1>{first}</h1>
   
    </div>
  );
}

-------------------------------------------------------------------------
# Redering Component when condition met | using PROP to the same component

import TestComponent from './TestComponent'

 - Intiallization
 const [logging, setlogging] = useState(false)

 - Utilization
 Check LogIn Status : {logging ? <TestComponent prop="LogIN"/> : 'Logged Out'}


``src/components/``


export default function TestComponent({prop}) {
  return (
    <div>
        <h6>{prop}</h6>
    </div>

----------------------------------------------------------------------
# If condition in return statment

  {(() => {
        if (data != null) {
          return (
           <div></div>
          )
        } 
      })()
   }

----------------------------------------------------------------------
# Input Tag

 const handleDelete = (e) => {
    setdataa(e.target.value)
  }

<input onChange={handleIdChange} type="text" placeholder="Enter ID" />

---------------------------------------------------------------------------

# Button 

<input type="button" value="delete" onClick={() => deletePhoto({id:dataa})}/>

------------------------------------------------------------------------------

# Routing

import { BrowserRouter, Route, Routes } from 'react-router-dom';  //npm install react-router-dom

``src/index.js``

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter>
    <Routes>

      <Route  path='/' element={<Header/>}>

        <Route index element={<App />} />
        <Route path='/product' element={<Product />} />
        <Route path='/product/:id' element={<Product />} />               
        <Route path='*' element={<NotFound404 />} />
    
      </Route>

      <Route path='nested' element={<Header/>}>                      //Nested Routing

        <Route index element={<Nested />} />
        <Route path='customer' element={<Customer />} />
        <Route path='*' element={<NotFound404 />} />

      </Route>

    </Routes>
    </BrowserRouter>   
  </React.StrictMode>
);


----------------------------------------------------------------------------------------------------------------------------------

# RTK Queary

``src/features/ApiSlice.js``

import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'


// Define a service using a base URL and expected endpoints
export const contactApi = createApi({
  reducerPath: 'contactApi',
  baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:3004' }),
  endpoints: (builder) => ({
    getContacts: builder.query({
      query: () => `contacts`,
      providesTags: ['Contacts'],  
    }),

    getContactById: builder.query({
      query: (id) => `contacts/${id}`,
      invalidatesTags: ['Contacts'],
    }),

    deleteContactById: builder.mutation({
      query: ({id}) => ({url: `contacts/${id}`, method: 'DELETE', body: id}),
      invalidatesTags: ['Contacts'],
    }),


export const {  useGetContactByIdQuery,useGetContactsQuery, useDeleteContactByIdMutation } = contactApi


``src/store.js``

import { configureStore, getDefaultMiddleware  } from '@reduxjs/toolkit'
import counterReducer from '../features/counter/counterSlice'
import { setupListeners } from '@reduxjs/toolkit/query'
import { pokemonApi, contactApi} from '../features/APISlice'

//for to configure mutiple api to middleware - used for cacheing
const middleware = getDefaultMiddleware().concat(
  contactApi.middleware,

  pokemonApi.middleware
);
export const store = configureStore({
  reducer: {
    counter: counterReducer,

    [pokemonApi.reducerPath]: pokemonApi.reducer,
    [contactApi.reducerPath]: contactApi.reducer,

  },
  middleware,
});

setupListeners(store.dispatch)

 - utilization 

``src/components/TestingApi.js``

import { useGetContactByIdQuery,useGetContactsQuery, useDeleteContactByIdMutation,useAddContactMutation } from './features/APISlice'

export default function TestApi() {
    const [id, setid] = useState('')
    const { data, error, isLoading } = useGetContactByIdQuery('7')
    const { data:contacts, error:contactsError, isLoading:contactsLoading } = useGetContactsQuery()
    const [deleteContact] = useDeleteContactByIdMutation()
    const handleIdChange = (e) => {
        setid(e.target.value)
      }
    const [addContact] = useAddContactMutation()
  return (
    <div>
        {JSON.stringify(contacts)}
        <input onChange={handleIdChange} type="text" placeholder="Enter ID to be deleted" />
        <input type="button" value="delete" onClick={() => deleteContact({id:id})}/>    
        <button onClick={() => addContact({"id":51,"name":"William Moore","email":"william.moore@example.com","phone":"+1 (999) 888-7777","address":"333 Pine St, Hillside, USA"})}>Add Contact</button>
    </div>

  )
}
------------------------------------------------------------------------------------------------------------------------

# Best Practice
- All state should be defined at the top most layer


